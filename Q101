101. Symmetric Tree
DescriptionHintsSubmissionsDiscussSolution
Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree [1,2,2,3,4,4,3] is symmetric:

    1
   / \
  2   2
 / \ / \
3  4 4  3
But the following [1,2,2,null,3,null,3] is not:
    1
   / \
  2   2
   \   \
   3    3
   
//9ms
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if (!root) return true;
            
        return isMirror(root->left, root->right);
    }
    
    bool isMirror(TreeNode *left, TreeNode *right) {
        if (!left || !right) 
            return (!left && !right);
        
        if (left->val != right->val) 
            return false;
        
        return (isMirror(left->left, right->right) && isMirror(left->right, right->left));
    }
};

// small change, 7ms 
class Solution {
public:
    bool isSymmetric(TreeNode* root) {            
        return (!root || isMirror(root->left, root->right));
    }
    
    bool isMirror(TreeNode *left, TreeNode *right) {
        if (!left || !right) 
            return (!left && !right);
                
        return ((left->val==right->val) && isMirror(left->left, right->right) && isMirror(left->right, right->left));
    }
};


//iterative version,  still o(n), o(n)
class Solution {
public:
    bool isSymmetric(TreeNode* root) {            
        queue<TreeNode *> q;
        q.push(root);
        q.push(root);
        while (!q.empty()) {
            TreeNode *t1 = q.front(); q.pop();
            TreeNode *t2 = q.front(); q.pop();
            if (t1 == nullptr && t2 == nullptr) continue;
            if (t1 == nullptr || t2 == nullptr) return false;
            if (t1->val != t2->val) return false;
            q.push(t1->left);
            q.push(t2->right);
            q.push(t1->right);
            q.push(t2->left);
        }
        return true;
    }
    
};
