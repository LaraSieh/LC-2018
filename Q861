861. Score After Flipping Matrix
We have a two dimensional matrix A where each value is 0 or 1.
A move consists of choosing any row or column, and toggling each value in that row or column: changing all 0s to 1s, and all 1s to 0s.
After making any number of moves, every row of this matrix is interpreted as a binary number, and the score of the matrix is the sum of these numbers.

Return the highest possible score.

 

Example 1:

Input: [[0,0,1,1],[1,0,1,0],[1,1,0,0]]
Output: 39
Explanation:
Toggled to [[1,1,1,1],[1,0,0,1],[1,1,1,1]].
0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39
 

Note:

1 <= A.length <= 20
1 <= A[0].length <= 20
A[i][j] is 0 or 1.



//Assume A is M * N.

//A[i][0] is worth 1 << (N - 1) points, more than the sum of (A[i][1] + .. + A[i][N-1]).
//We need to toggle all A[i][0] to 1, here I toggle all lines for A[i][0] = 0.
//A[i][j] is worth 1 << (N - 1 - j)
//For every col, I count the current number of 1s.
//After step 1, A[i][j] becomes 1 if A[i][j] == A[i][0].
//if M - cur > cur, we can toggle this column to get more 1s.
//max(M, M - cur) will be the maximum number of 1s that we can get.


//Time Complexity:
O(MN)


class Solution {
public:
    int matrixScore(vector<vector<int>>& A) {
        int m=A.size(),n=A[0].size(),sum=(1<<(n-1))*m;
        
        for (int i=1; i<n; ++i) {
            int col = 0;
            for (int j=0; j<m; ++j) {
                if (A[j][i]==A[j][0]) {
                    // will be flipped to 1 after first column all flipped to 1
                    ++col;
                }             
            }
            col = max(m-col,col);
            sum += (1 << (n-i-1)) * col;   
        }
        
        return sum;
    }
};
