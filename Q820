820. Short Encoding of Words

Given a list of words, we may encode it by writing a reference string S and a list of indexes A.

For example, if the list of words is ["time", "me", "bell"], we can write it as S = "time#bell#" and indexes = [0, 2, 5].

Then for each index, we will recover the word by reading from the reference string from that index until we reach a "#" character.

What is the length of the shortest reference string S possible that encodes the given words?

Example:

Input: words = ["time", "me", "bell"]
Output: 10
Explanation: S = "time#bell#" and indexes = [0, 2, 5].
Note:

1 <= words.length <= 2000.
1 <= words[i].length <= 7.
Each word has only lowercase letters.





class Solution {
public:
    struct Trie {
        Trie * children[26];
        Trie() {for (int i=0;i<26;++i) children[i]=nullptr;}
    };
    
    int minimumLengthEncoding(vector<string>& words) {
        Trie *root= new Trie();
        
        for (string &w : words) {
            int len=w.size();
            Trie *node = root;
            for (int i=len-1; i>=0; --i) {
                int index = w[i]-'a';
                if (node->children[index] == nullptr) {
                    node->children[index] = new Trie();
                }
                node = node->children[index];
            }
        }
        
        int total=0;
        calculateSuffix(root, 0, total);
        return total;
    }
    
    void calculateSuffix(Trie *node, int len, int& total) {
        if (node==nullptr) return;
        
        bool hasChildren=false;
        for (int i=0; i<26;++i) {
            if (node->children[i]) {
                hasChildren=true;
                calculateSuffix(node->children[i], len+1, total);
            }
        }
        if (hasChildren==false) total += len+1;
    }
};
// simple but not necessary the fastest
