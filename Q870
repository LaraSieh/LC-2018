870. Advantage Shuffle
Given two arrays A and B of equal size, the advantage of A with respect to B is the number of indices i for which A[i] > B[i].
Return any permutation of A that maximizes its advantage with respect to B.

Example 1:
Input: A = [2,7,11,15], B = [1,10,4,11]
Output: [2,11,7,15]

Example 2:
Input: A = [12,24,8,32], B = [13,25,32,11]
Output: [24,32,8,12]
 
Note:
1 <= A.length = B.length <= 10000
0 <= A[i] <= 10^9
0 <= B[i] <= 10^9





class Solution {
public:
    vector<int> advantageCount(vector<int>& A, vector<int>& B) {
        int n=(int)A.size();
        vector<pair<int,int>> sortedB;
        
        for (int i=0; i<n; ++i) {
            sortedB.push_back(make_pair(B[i],i));
        }
        sort(sortedB.begin(), sortedB.end());
        sort(A.begin(), A.end());
      
        int a=n-1, b=n-1, start=0;    
        while (a>=0&&b>=0) {
            if (A[a]>sortedB[b].first) {
                B[sortedB[b].second] = A[a];
                --a;--b;
            } else {
                B[sortedB[b].second] = A[start++];
                --b;
            }
        }
    
        return B;
    }
};


class Solution {
public:
    vector<int> advantageCount(vector<int>& A, vector<int>& B) {
        int n=(int)A.size();
        vector<pair<int,int>> sortedB;
        
        for (int i=0; i<n; ++i) {
            sortedB.push_back(make_pair(B[i],i));
        }
       
        sort(sortedB.begin(), sortedB.end(), 
             [](pair<int,int>& b1,pair<int,int>& b2)
             { if (b1.first==b2.first) 
                    return b1.second<b2.second; 
                else
                    return b1.first<b2.first;
             }); 
        sort(A.begin(), A.end());
        int a=n-1, b=n-1, start=0;    
        while (a>=0&&b>=0) {
            if (A[a]>sortedB[b].first) {
                B[sortedB[b].second] = A[a];
                --a;--b;
            } else {
                B[sortedB[b].second] = A[start++];
                --b;
            }
        }
    
        return B;
    }
};
