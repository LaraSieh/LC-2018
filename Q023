
23. Merge k Sorted Lists
DescriptionHintsSubmissionsDiscussSolution
Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

Example:

Input:
[
  1->4->5,
  1->3->4,
  2->6
]
Output: 1->1->2->3->4->4->5->6


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if (lists.empty()) return NULL;
        
        while (lists.size()>1) {
            int left=0, right=lists.size()-1;
            vector<ListNode*> newList;
            while (left<right) {
                newList.push_back(mergeTwoList(lists[left],lists[right]));
                ++left;
                --right;
            }
            if (left == right) {
                newList.push_back(lists[left]);
            }
                
            lists = newList;
        }
        
        return lists[0];
    }
    
    ListNode *mergeTwoList(ListNode *l1, ListNode *l2) {
        ListNode dummy(0);
        
        ListNode *cur=&dummy;
        while (l1 && l2) {
            if (l2->val < l1->val) {
                cur->next = l2;
                l2 = l2->next;
            } else { // l1->val <= l2->val
                cur->next = l1;
                l1 = l1->next;
            }
            cur = cur->next;
        }
        
        cur->next = l1 ? l1 : l2;
        return dummy.next;
    }
};

// clean up the above solution
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if (lists.empty()) return NULL;
        
        while (lists.size()>1) {
            lists.push_back(mergeTwoList(lists[0],lists[1]));
            
            lists.erase(lists.begin());
            lists.erase(lists.begin());
        }
        
        return lists.front();
    }
    
    ListNode *mergeTwoList(ListNode *l1, ListNode *l2) {
        ListNode dummy(0);
        
        ListNode *cur=&dummy;
        while (l1 && l2) {
            if (l2->val < l1->val) {
                cur->next = l2;
                l2 = l2->next;
            } else { // l1->val <= l2->val
                cur->next = l1;
                l1 = l1->next;
            }
            cur = cur->next;
        }
        
        cur->next = l1 ? l1 : l2;
        return dummy.next;
    }
};

// further clean up to eliminate those push_back and erase operations
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if (lists.empty()) return NULL;
        
        int len=lists.size();
        while (len>1) {
            for (int i=0; i<len/2; ++i) {
                lists[i]=mergeTwoList(lists[i],lists[len-1-i]);
            }
            len = (len+1)/2;
        }
        
        return lists.front();
    }
    
    ListNode *mergeTwoList(ListNode *l1, ListNode *l2) {
        ListNode dummy(0);
        
        ListNode *cur=&dummy;
        while (l1 && l2) {
            if (l2->val < l1->val) {
                cur->next = l2;
                l2 = l2->next;
            } else { // l1->val <= l2->val
                cur->next = l1;
                l1 = l1->next;
            }
            cur = cur->next;
        }
        
        cur->next = l1 ? l1 : l2;
        return dummy.next;
    }
};


// priority
