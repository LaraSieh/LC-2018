222. Count Complete Tree Nodes
Given a complete binary tree, count the number of nodes.

Note:

Definition of a complete binary tree from Wikipedia:
In a complete binary tree every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.

Example:

Input: 
    1
   / \
  2   3
 / \  /
4  5 6

Output: 6


// TLE solution
class Solution {
public:
    int countNodes(TreeNode* root) {
        if (root==NULL)
            return 0;
        return (countNodes(root->left)+countNodes(root->right)+1);
    }
};

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int countNodes(TreeNode* root) {
        if (!root) return 0;
        
        int lHeight=1, rHeight=1; 
        TreeNode *l = root->left, *r=root->right;
        while (l) {
            ++lHeight; l=l->left;
        }
        while (r) {
            ++rHeight; r=r->right;
        }
        if (lHeight==rHeight) { 
            return (1<<lHeight) -1;
        }
            
        return (countNodes(root->left)+countNodes(root->right)+1);
    }
};
