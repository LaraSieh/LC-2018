872. Leaf-Similar Trees
Consider all the leaves of a binary tree.  From left to right order, the values of those leaves form a leaf value sequence.



For example, in the given tree above, the leaf value sequence is (6, 7, 4, 9, 8).

Two binary trees are considered leaf-similar if their leaf value sequence is the same.

Return true if and only if the two given trees with head nodes root1 and root2 are leaf-similar.

 

Note:

Both of the given trees will have between 1 and 100 nodes.


class Solution {
public:
    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        vector<int> leaves1, leaves2;
        
        getLeaves(root1, leaves1);
        getLeaves(root2, leaves2);
        
        if (leaves1.size() != leaves2.size())
            return false;
        
        for (int i=0; i<(int)leaves1.size(); ++i) {
            if (leaves1[i] != leaves2[i])
                return false;
        }
        return true;
    }
    
    void getLeaves(TreeNode *node, vector<int>& leaves) {
        if (!node) return;
        if (!node->left && !node->right) {
            leaves.push_back(node->val);
            return;
        }

        getLeaves(node->left,leaves);
        getLeaves(node->right,leaves);
            
    }
};




class Solution {
public:
    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        stack<TreeNode *> s1, s2;
        s1.push(root1); s2.push(root2);
        while (!s1.empty() && !s2.empty()) {
            if (nextLeaf(s1) != nextLeaf(s2))
                return false;
        }
        
        return (s1.empty() && s2.empty());
    }
    
    int nextLeaf(stack<TreeNode *>& s) {
        while (true) {
            TreeNode *node = s.top(); s.pop();
            if (node->right) s.push(node->right);
            if (node->left)  s.push(node->left);
            if (!node->left && !node->right) return node->val;
        }
        return 0;
    }
};
