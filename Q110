110. Balanced Binary Tree
Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as:

a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

Example 1:

Given the following tree [3,9,20,null,null,15,7]:

    3
   / \
  9  20
    /  \
   15   7
Return true.

Example 2:

Given the following tree [1,2,2,3,3,null,null,4,4]:

       1
      / \
     2   2
    / \
   3   3
  / \
 4   4
Return false.

//15ms
class Solution {
public:
    bool isBalanced(TreeNode* root) {
        int l = isBalancedDepth(root);
        return (l>-1);
    }
    
    int isBalancedDepth(TreeNode *node) {
        if (node==nullptr) return 0;
        
        int l = isBalancedDepth(node->left);
        if (l==-1) return l;
        int r = isBalancedDepth(node->right);
        if (r==-1) return r;
    
        return (abs(l-r)>1 ? -1 : max(l,r)+1);
        
    }
};

//10ms
class Solution {
public:
    bool isBalanced(TreeNode* root) {
        int l = isBalancedDepth(root);
        if (l==-1) return false;
        return true; 
    }
    
    int isBalancedDepth(TreeNode *node) {
        if (node==nullptr) return 0;
        
        int l = isBalancedDepth(node->left);
        if (l==-1) return l;
        int r = isBalancedDepth(node->right);
        if (r==-1) return r;
    
        if ((l-r<-1) || (l-r>1))
            return -1;
        else 
        return (max(l,r)+1);      
    }
};
