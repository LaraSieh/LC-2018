189. Rotate Array
DescriptionHintsSubmissionsDiscussSolution
Given an array, rotate the array to the right by k steps, where k is non-negative.

Example 1:

Input: [1,2,3,4,5,6,7] and k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]
Example 2:

Input: [-1,-100,3,99] and k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]
Note:

Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.
Could you do it in-place with O(1) extra space?


// 12ms
class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        k=k%nums.size();
        reverse(nums.begin(), nums.end());
        reverse(nums.begin(), nums.begin()+k);
        reverse(nums.begin()+k,nums.end());
    }
};

// 12ms
class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        int n = nums.size(); 
        if (n==0) return;
        
        vector<int> temp(n,0);
        k %= n;
        for (int i=0; i<n; ++i) {
            temp[i] = nums[(n-k+i)%n]; 
        }
        for (int i=0; i<n; ++i) {
            nums[i] = temp[i];
        }
    }
};

// just for fun, 256ms
class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        int n=(int)nums.size();
        k=k%nums.size();
        for (int i=0; i<k; ++i) {
            int temp = nums[n-1];
            for (int j=n-1; j>0; --j) {
                nums[j] = nums[j-1];
            }
            nums[0] = temp;
        }
    }
};
