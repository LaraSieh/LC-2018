783. Minimum Distance Between BST Nodes
Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.

Example :

Input: root = [4,2,6,1,3,null,null]
Output: 1
Explanation:
Note that root is a TreeNode object, not an array.

The given tree [4,2,6,1,3,null,null] is represented by the following diagram:

          4
        /   \
      2      6
     / \    
    1   3  

while the minimum difference in this tree is 1, it occurs between node 1 and node 2, also between node 3 and node 2.
Note:

The size of the BST will be between 2 and 100.
The BST is always valid, each node's value is an integer, and each node's value is different.


class Solution {
public:
    int minDiffInBST(TreeNode* root) {

        inorder(root);
        
        int diff=INT_MAX;
        for (int i=1; i<(int)bstorder.size()-1;++i) {
            diff = min(diff, min(bstorder[i]-bstorder[i-1], bstorder[i+1]-bstorder[i]));
        }
        return diff;
    }

    void inorder(TreeNode *root) {
        if (root->left) inorder(root->left);
        bstorder.push_back(root->val);
        if (root->right) inorder(root->right);
    }
    
private:
    vector<int> bstorder;
};


// 
class Solution {
public:
    int minDiffInBST(TreeNode* root) {
        
        if (root->left) minDiffInBST(root->left);
        if (pre!=INT_MIN) minDiff = min(minDiff, root->val - pre);
        pre = root->val;
        if (root->right) minDiffInBST(root->right);
        
        return minDiff;
    }

private:
    int minDiff=INT_MAX;
    int pre = INT_MIN;
};
