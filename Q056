56. Merge Intervals
DescriptionHintsSubmissionsDiscussSolution
Given a collection of intervals, merge all overlapping intervals.

Example 1:

Input: [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
Example 2:

Input: [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considerred overlapping.


/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> merge(vector<Interval>& intervals) {
        if (intervals.size() == 0) return vector<Interval>{};
        
        // sort all the intervals
        sort(intervals.begin(), intervals.end(), 
             [](Interval& i1, Interval& i2) { if (i1.start!=i2.start) {return (i1.start < i2.start);} else {return (i1.end < i2.end);}});
        
        // merge them in order
        vector<Interval>  merged(1,intervals[0]);
        for (int i=1; i<intervals.size(); ++i) {
            Interval& last = merged.back();   // reference here is very important, can improve perform huge
            if (intervals[i].start > last.end) {
                merged.push_back(intervals[i]);
            } else if (last.end < intervals[i].end) {
                merged[merged.size()-1].end = intervals[i].end;
            }
        }
        
        return merged;        
    }
};
