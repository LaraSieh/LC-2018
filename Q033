33. Search in Rotated Sorted Array
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

Your algorithm's runtime complexity must be in the order of O(log n).

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1

// O(lg(n)), 9ms
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int len=nums.size();
        
        int left=0, right=len-1;
        while (left<=right) {
            int mid = left + (right-left)/2;
            
            if (nums[mid]==target)
                return mid;
            
            if (nums[left]<=target) {
                if (nums[mid]>=nums[left] && nums[mid]<target)
                    left = mid+1;
                else 
                    right = mid-1;
            } else { // nums[left]>target
                if (nums[mid]<nums[left] && nums[mid]>target)
                    right = mid-1;
                else // nums[mid]>=nums[left] || nums[mid]<=target
                    left = mid+1;
            }
        }
        
        return -1;
    }
};


// linear, 10ms
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int len=nums.size();
        
        // using linear method just to check how slow it is
        for (int i=0; i<len; ++i) {
            if (nums[i]==target)
                return i;
        }
        
        return -1;
    }
};
