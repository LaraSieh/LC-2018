54. Spiral Matrix
Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.

Example 1:

Input:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
Output: [1,2,3,6,9,8,7,4,5]
Example 2:

Input:
[
  [1, 2, 3, 4],
  [5, 6, 7, 8],
  [9,10,11,12]
]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]


// solution
class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        if (matrix.size()==0 || matrix[0].size()==0) 
            return vector<int>{};
        
        vector<int> spiral; 
        int top=0, bottom=matrix.size()-1, left=0, right=matrix[0].size()-1;
        while (left<=right && top<=bottom) {
            for (int col=left; col<=right; ++col) {
                spiral.push_back(matrix[top][col]);
            }
            ++top;  
            if (top>bottom) break;
            
            for (int row=top;row<=bottom;++row) {
                spiral.push_back(matrix[row][right]);
            }
            --right;
            if (left>right) break;
            
            for (int col=right;col>=left;--col) {
                spiral.push_back(matrix[bottom][col]);
            }
            --bottom;
            if (top>bottom) break;
            
            for (int row=bottom;row>=top;--row) {
                spiral.push_back(matrix[row][left]);
            }
            ++left;
            if (left>right) break;
        }
        
        return spiral;
    }
};

// small improvement
class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        if (matrix.size()==0 || matrix[0].size()==0) 
            return vector<int>{};
        
        vector<int> spiral; 
        int top=0, bottom=matrix.size()-1, left=0, right=matrix[0].size()-1;
        while (left<=right && top<=bottom) {
            for (int col=left; col<=right; ++col) {
                spiral.push_back(matrix[top][col]);
            }
            ++top;  
            
            for (int row=top;row<=bottom;++row) {
                spiral.push_back(matrix[row][right]);
            }
            --right;
            
            for (int col=right;col>=left&&top<=bottom;--col) {
                spiral.push_back(matrix[bottom][col]);
            }
            --bottom;
            
            for (int row=bottom;row>=top&&left<=right;--row) {
                spiral.push_back(matrix[row][left]);
            }
            ++left;
        }
        
        return spiral;
    }
};
