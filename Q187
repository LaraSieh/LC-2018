187. Repeated DNA Sequences
DescriptionHintsSubmissionsDiscussSolution
All DNA is composed of a series of nucleotides abbreviated as A, C, G, and T, for example: "ACGAATTCCG". When studying DNA, it is sometimes useful to identify repeated sequences within the DNA.

Write a function to find all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule.

Example:

Input: s = "AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT"

Output: ["AAAAACCCCC", "CCCCCAAAAA"]

class Solution {
public:
    vector<string> findRepeatedDnaSequences(string s) {
        unordered_map<string,int> dnaSequences; 
        
        for (int i=0; i<=((int)s.size()-10); ++i) {
            string sub = s.substr(i,10);
            ++dnaSequences[sub];
        }
        
        vector<string> dups;
        for (auto it=dnaSequences.begin(); it != dnaSequences.end(); ++it) {
            if (it->second > 1)
                dups.push_back(it->first);
        }
        return dups;
    }
};

// S2
class Solution {
public:
    vector<string> findRepeatedDnaSequences(string s) {
        unordered_set<string> repeatedDnaSet, st;
    
        for (int i=0; i<(int)s.size()-9; ++i)
        {
            string sub = s.substr(i,10);
            if (st.count(sub))
                repeatedDnaSet.insert(sub);
            else
                st.insert(sub);
        } 
        return vector<string>(repeatedDnaSet.begin(), repeatedDnaSet.end());   
    }
};

// S3
class Solution {
public:
    vector<string> findRepeatedDnaSequences(string s) {
        unordered_set<string> repeatedDnaSet;
        unordered_set<int> st;
        // we use 2-digit to represent one char, then we only 
        // need 20 bits to represent 10 char stream
        unordered_map<char,int> m{{'A',0},{'C',1},{'G',2},{'T',3}};
        int cur = 0, i=0;
        while (i<9) cur = cur << 2 | m[s[i++]];
        while (i<s.size()) {
            // mask the last 18-bit, i.e. 9 char
            cur = ((cur & 0x3ffff) << 2) | m[s[i++]];
            if (st.count(cur))
                repeatedDnaSet.insert(s.substr(i-10,10));
            else
                st.insert(cur);
        } 
        return vector<string>(repeatedDnaSet.begin(), repeatedDnaSet.end());   
    }
};
