321. Create Maximum Number
DescriptionHintsSubmissionsDiscussSolution
Given two arrays of length m and n with digits 0-9 representing two numbers. Create the maximum number of length k <= m + n from digits of the two. The relative order of the digits from the same array must be preserved. Return an array of the k digits.

Note: You should try to optimize your time and space complexity.

Example 1:

Input:
nums1 = [3, 4, 6, 5]
nums2 = [9, 1, 2, 5, 8, 3]
k = 5
Output:
[9, 8, 6, 5, 3]
Example 2:

Input:
nums1 = [6, 7]
nums2 = [6, 0, 4]
k = 5
Output:
[6, 7, 6, 0, 4]
Example 3:

Input:
nums1 = [3, 9]
nums2 = [8, 9]
k = 3
Output:
[9, 8, 9]



// cleaned up
class Solution {
public:
    vector<int> maxNumber(vector<int>& nums1, vector<int>& nums2, int k) {
        int n1=nums1.size(), n2=nums2.size();
        vector<int> largest;
        for (int i=max(k-n2,0); i<=min(k,n1);++i) {
            vector<int> cur = createNumbers(getLargest(nums1,i),getLargest(nums2,k-i));
            if (cur>largest)
                largest = cur;
        }

        return largest;
    }
    
    vector<int> getLargest(vector<int>& nums, int len) {
        int drop = nums.size() - len;
        vector<int> large;
        for (int num : nums) {
            while (drop && large.size() && large.back() < num) {
                large.pop_back();
                --drop;
            }
            large.push_back(num);
        }
        large.resize(len);
        return large;
    }
    
    vector<int> createNumbers(vector<int>&& v1, vector<int>&& v2) {
        vector<int> combined;
        while (v1.size() + v2.size()) {
            vector<int> &cur = v1 > v2 ? v1 : v2;
            combined.push_back(cur[0]);
            cur.erase(cur.begin());
        }
        return combined;
    }
};

class Solution {
public:
    vector<int> maxNumber(vector<int>& nums1, vector<int>& nums2, int k) {
        int n1=nums1.size(), n2=nums2.size();
        vector<int> largest;
        for (int i=max(k-n2,0); i<=min(k,n1);++i) {
            vector<int> cur = createNumbers(getLargest(nums1,i),getLargest(nums2,k-i));
        
            if (cur>largest)
                largest = cur;
        }

        return largest;
    }
    
    vector<int> getLargest(vector<int>& nums, int len) {
        int drop = nums.size() - len;
        vector<int> large;
        for (int num : nums) {
            while (drop && large.size() && large.back() < num) {
                large.pop_back();
                --drop;
            }
            large.push_back(num);
        }
        large.resize(len);
        return large;
    }
    
    vector<int> createNumbers(vector<int> v1, vector<int> v2) {
        vector<int> combined;
        while (v1.size() + v2.size()) {
            vector<int> &cur = v1 > v2 ? v1 : v2;
            combined.push_back(cur[0]);
            cur.erase(cur.begin());
        }
        return combined;
    }
};
