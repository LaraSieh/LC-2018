57. Insert Interval
Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.

Example 1:

Input: intervals = [[1,3],[6,9]], newInterval = [2,5]
Output: [[1,5],[6,9]]
Example 2:

Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
Output: [[1,2],[3,10],[12,16]]
Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].



/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> insert(vector<Interval>& intervals, Interval newInterval) {
        vector<Interval> merged(1,newInterval);
        
        for (int i=0; i<intervals.size(); ++i) {
            Interval &last = merged.back();
            if (intervals[i].start>last.end) {
                merged.push_back(intervals[i]);
            } else if (last.start>intervals[i].end) {
                Interval newLast(last);
                last.start = intervals[i].start;
                last.end = intervals[i].end;
                merged.push_back(newLast);
            }  else { // invervals[i].start <= last.end
                last.start = min(last.start, intervals[i].start);
                last.end = max(last.end, intervals[i].end);
            }
        }

        return merged;
    }
};

// a little improvement, but doesn't seem to show any time difference
/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> insert(vector<Interval>& intervals, Interval newInterval) {
        vector<Interval> merged;
        
        int div = 0, n=intervals.size();
        while (div < n) {
            if (newInterval.end < intervals[div].start) {
                break;
            } else if (newInterval.start > intervals[div].end) {
                merged.push_back(intervals[div]);
            } else {
                newInterval.start = min(newInterval.start, intervals[div].start);
                newInterval.end = max(newInterval.end, intervals[div].end);
            }
            ++div;
        }
        
        merged.push_back(newInterval);
        
        while (div < n) {
            merged.push_back(intervals[div]); ++div;
        }

        return merged;
    }
};
