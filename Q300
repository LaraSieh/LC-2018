300. Longest Increasing Subsequence
Given an unsorted array of integers, find the length of longest increasing subsequence.

Example:

Input: [10,9,2,5,3,7,101,18]
Output: 4 
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4. 
Note:

There may be more than one LIS combination, it is only necessary for you to return the length.
Your algorithm should run in O(n2) complexity.
Follow up: Could you improve it to O(n log n) time complexity?


class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        vector<int>  subSeq; 
        
        for (int i=0; i<(int)nums.size(); ++i) {
            if (i==0 || nums[i]>subSeq.back()) 
                subSeq.push_back(nums[i]);
            else {
                for (int j=0; j<(int)subSeq.size(); ++j) {
                    if (nums[i]<=subSeq[j]) {
                        subSeq[j] = nums[i];
                        break;
                    }
                }
            }
        }
        
        return subSeq.size();
    }
};

// O(nlogn)
class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        if (nums.size()==0) return {};
        
        vector<int>  subSeq(1,nums[0]); 
        for (int i=1; i<(int)nums.size(); ++i) {
            vector<int>::iterator iter = lower_bound(subSeq.begin(), subSeq.end(),nums[i]);
            if (iter == subSeq.end()) {
                subSeq.push_back(nums[i]);
            } else {
                *iter = nums[i];
            }
        }
        
        return subSeq.size();
    }
};
