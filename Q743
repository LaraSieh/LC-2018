743. Network Delay Time
There are N network nodes, labelled 1 to N.

Given times, a list of travel times as directed edges times[i] = (u, v, w), where u is the source node, v is the target node, and w is the time it takes for a signal to travel from source to target.

Now, we send a signal from a certain node K. How long will it take for all nodes to receive the signal? If it is impossible, return -1.

Note:
N will be in the range [1, 100].
K will be in the range [1, N].
The length of times will be in the range [1, 6000].
All edges times[i] = (u, v, w) will have 1 <= u, v <= N and 1 <= w <= 100.




//BFS
class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int N, int K) {
        vector<vector<pair<int,int>>> graph(N+1,vector<pair<int,int>>{});
        for (int i=0;i<times.size();++i) {
            graph[times[i][0]].push_back(make_pair(times[i][1], times[i][2]));
        }
        queue<pair<int,int>> q; // first stop, second time
        q.push(make_pair(K, 0));
        
        vector<int> arrivetimes(N+1,INT_MAX);
        arrivetimes[K]=0; 
        while (!q.empty()) {
            auto start = q.front(); q.pop();
            int node = start.first, t=start.second;
            for (int i=0; i<graph[node].size(); ++i) {
                int dst = graph[node][i].first;
                int nt =  t+graph[node][i].second;
                if (nt<arrivetimes[dst]) { 
                    q.push(make_pair(dst,nt));
                    arrivetimes[dst] = nt;
                } 
            }
        }
        
        int longest=0; 
        for (int i=1; i<=N; ++i)
        {
            if (arrivetimes[i]==INT_MAX) return -1;
            longest = max(longest,arrivetimes[i]);
        }
        return longest;
    }
};
