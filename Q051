51. N-Queens
The n-queens puzzle is the problem of placing n queens on an n√ón chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space respectively.

Example:

Input: 4
Output: [
 [".Q..",  // Solution 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // Solution 2
  "Q...",
  "...Q",
  ".Q.."]
]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above.


class Solution {
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> sol;
        vector<string> rows(n, string(n,'.'));
        
        trySolveNQueens(sol, rows, 0, n);
        return sol;
    }
    
    void trySolveNQueens(vector<vector<string>>& sol, vector<string>& rows, int row, int n) {
        if (row==n) {
            sol.push_back(rows);
            return;
        }

        for (int col=0; col<n; ++col) {
            if (isValid(rows,row,col,n)) {
                rows[row][col] = 'Q';
                trySolveNQueens(sol, rows, row+1, n);
                rows[row][col] = '.';
            }
        }
        return;
    }
    
    bool isValid(vector<string>& rows, int row, int col, int n) {
        
        // check if there was already a queen on this col
        for (int i=0; i<row; ++i) {
            if (rows[i][col]=='Q')
                return false;
        }
        
        //check if 45degree diagonal had a queen
        for (int i=row-1, j=col-1; i>=0&&j>=0; --i, --j) {
            if (rows[i][j]=='Q')
                return false;
        }
        
        //check if 135degree diagonal had a queen
        for (int i=row-1, j=col+1; i>=0&&j<n; --i, ++j) {
            if (rows[i][j]=='Q')
                return false;
        }
        
        return true;
    }
};
