24. Swap Nodes in Pairs
Given a linked list, swap every two adjacent nodes and return its head.

Example:

Given 1->2->3->4, you should return the list as 2->1->4->3.
Note:

Your algorithm should use only constant extra space.
You may not modify the values in the list's nodes, only nodes itself may be changed.

// solution 1, exchange values directly
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        if (!head || !head->next) 
            return head;
               
        ListNode *first=head, *second=head->next;
        while (first && second) {
            int val = first->val;
            first->val = second->val;
            second->val = val;
            first = second->next;
            second = first ? first->next : nullptr;
        }
        
        return head;
    }
};

// solution 2, using pointer
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        ListNode **ptr=&head, *cur;
        
        while (cur = *ptr) {
            if (cur->next) {
                int val = cur->val;
                cur->val = cur->next->val;
                cur->next->val = val;
                cur = cur->next;
            }
            ptr = &cur->next;
        }
        
        return head;
    }
};

// better and clean pointer solution
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        ListNode **ptr=&head, *odd, *even;
        
        while ((odd = *ptr) && (even = odd->next)) {
            odd->next = even->next;
            even->next = odd;
            *ptr = even;
            ptr = &(odd->next);
        }
        
        return head;
    }
};
