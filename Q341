341. Flatten Nested List Iterator
Given a nested list of integers, implement an iterator to flatten it.

Each element is either an integer, or a list -- whose elements may also be integers or other lists.

Example 1:

Input: [[1,1],2,[1,1]]
Output: [1,1,2,1,1]
Explanation: By calling next repeatedly until hasNext returns false, 
             the order of elements returned by next should be: [1,1,2,1,1].
Example 2:

Input: [1,[4,[6]]]
Output: [1,4,6]
Explanation: By calling next repeatedly until hasNext returns false, 
             the order of elements returned by next should be: [1,4,6].


/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * class NestedInteger {
 *   public:
 *     // Return true if this NestedInteger holds a single integer, rather than a nested list.
 *     bool isInteger() const;
 *
 *     // Return the single integer that this NestedInteger holds, if it holds a single integer
 *     // The result is undefined if this NestedInteger holds a nested list
 *     int getInteger() const;
 *
 *     // Return the nested list that this NestedInteger holds, if it holds a nested list
 *     // The result is undefined if this NestedInteger holds a single integer
 *     const vector<NestedInteger> &getList() const;
 * };
 */
class NestedIterator {
public:
    NestedIterator(vector<NestedInteger> &nestedList) {
        for (int i=(int)nestedList.size()-1; i>=0; --i) {
            stack_.push(nestedList[i]);
        }
    }

    int next() {
        auto& ni = stack_.top();
        stack_.pop();
        //assert(ni.isInteger());
        return ni.getInteger();
    }

    bool hasNext() {
        while (!stack_.empty() && !stack_.top().isInteger()) {
            vector<NestedInteger> ni = stack_.top().getList(); stack_.pop();
            for (int i=(int)ni.size()-1; i>=0; --i) {
                stack_.push(ni[i]);
            }
        }
        return (!stack_.empty());
    }

private:
    stack<NestedInteger> stack_;
};

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i(nestedList);
 * while (i.hasNext()) cout << i.next();
 */
 
 
 
 // solution 2
 class NestedIterator {
public:
    NestedIterator(vector<NestedInteger> &nestedList) {
        flatten(nestedList);
    }

    int next() {
        int n = queue_.front(); queue_.pop();
        return n;
    }

    bool hasNext() {
        return (!queue_.empty());
    }

private:
    void flatten(vector<NestedInteger> &nestedList) {
        for (int i=0; i<nestedList.size(); ++i) {
            if (nestedList[i].isInteger()) {
                queue_.push(nestedList[i].getInteger());
            } else {
                flatten(nestedList[i].getList());
            }
        }
    }
    
    queue<int> queue_;
};
