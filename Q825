825. Friends Of Appropriate Ages
DescriptionHintsSubmissionsDiscussSolution
Some people will make friend requests. The list of their ages is given and ages[i] is the age of the ith person. 

Person A will NOT friend request person B (B != A) if any of the following conditions are true:

age[B] <= 0.5 * age[A] + 7
age[B] > age[A]
age[B] > 100 && age[A] < 100
Otherwise, A will friend request B.

Note that if A requests B, B does not necessarily request A.  Also, people will not friend request themselves.

How many total friend requests are made?

Example 1:

Input: [16,16]
Output: 2
Explanation: 2 people friend request each other.
Example 2:

Input: [16,17,18]
Output: 2
Explanation: Friend requests are made 17 -> 16, 18 -> 17.
Example 3:

Input: [20,30,100,110,120]
Output: 
Explanation: Friend requests are made 110 -> 100, 120 -> 110, 120 -> 100.
 

Notes:

1 <= ages.length <= 20000.
1 <= ages[i] <= 120.


// TLE solution
class Solution {
public:
    int coupleRequests(int a1, int a2) {
        if (a1==a2) return (a1 <= 14 ? 0 : 2);
        
        if (a1<a2) swap(a1,a2);
        //a1 > a2 

        if (a2>100&&a1<100) return 0;
        if (a1 >= (a2-7)*2) return 0;
        
        return 1;
    }
    
    int numFriendRequests(vector<int>& ages) {
        int n=(int)ages.size(), requests=0;
        
        for (int i=0;i<n;++i)  {
            for (int j=i+1;j<n;++j) {
                requests += coupleRequests(ages[i],ages[j]);
            }
        }
        return requests;
    }
};

//s2
class Solution {
public:   
    //rules: 
    // 1. age[B] <= 0.5 * age[A] + 7
    // 2. age[B] > age[A]
    // 3. age[B] > 100 && age[A] < 100
    int numFriendRequests(vector<int>& ages) {
        int agecounts[121] = {}, requests = 0;
        for (auto age : ages) ++agecounts[age];
        
        for (auto a1=15; a1<=120; ++a1)
            for (int a2 = 0.5 * a1 + 8; a2<=a1; ++a2) 
                requests += agecounts[a2] * (agecounts[a1] - (a1 == a2));
  
        return requests;
    }
};

class Solution {
public:   
    //rules: A can't request B
    // 1. age[B] <= 0.5 * age[A] + 7
    // 2. age[B] > age[A]
    // 3. age[B] > 100 && age[A] < 100
    int numFriendRequests(vector<int>& ages) {
        int agecounts[121] = {}, requests = 0;
        for (auto age : ages) ++agecounts[age];
        
        for (auto a1=14; a1<=120; ++a1)
            for (int a2=a1; a2<min((a1-7)*2,121); ++a2) {
                 requests += agecounts[a2] * (agecounts[a1] - (a1 == a2));
            }
        return requests;
    }
};
