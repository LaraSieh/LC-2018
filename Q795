795. Number of Subarrays with Bounded Maximum
We are given an array A of positive integers, and two positive integers L and R (L <= R).

Return the number of (contiguous, non-empty) subarrays such that the value of the maximum array element in that subarray is at least L and at most R.

Example :
Input: 
A = [2, 1, 4, 3]
L = 2
R = 3
Output: 3
Explanation: There are three subarrays that meet the requirements: [2], [2, 1], [3].
Note:

L, R  and A[i] will be an integer in the range [0, 10^9].
The length of A will be in the range of [1, 50000].



class Solution {
public:
    int numSubarrayBoundedMax(vector<int>& A, int L, int R) {
        int n=(int)A.size(), start=0;
        vector<int> maxPoints;
        
        int count = 0;
        for (int i=0; i<n; ++i) {
            if (A[i]>=L && A[i]<=R) {
                maxPoints.push_back(i);
            } 
            if (A[i]>R || i==n-1) {
                // calculate possible subarray before it and reset
                for (int j=0; j<maxPoints.size(); ++j) {
                    int end = (A[i]>R) ? i-1 : i;
                    int index=maxPoints[j];
                    //before(inclusive)=index-start+1, after(exclusive)=i-index
                    // total = before + before*after = before*(after+1)
                    count += (index-start+1)*(end-index+1);
                    start = index+1;
                }
                maxPoints.clear();       
                start = i+1;
            }
        }
        return count;
    }
};

// o(n) time, o(1) space
class Solution {
public:
    int numSubarrayBoundedMax(vector<int>& A, int L, int R) {
        int n=(int)A.size(),count = 0, cur=0, start=0;
        for (int i=0; i<n; ++i) {
            if (A[i]>=L && A[i]<=R) {
                count += i-start+1;
                cur = i-start+1;
            } else if (A[i]>R) {
                cur = 0;
                start = i+1;
            } else { //A[i]<L
                count += cur;
            }
        }
        return count;
    }
};

// dp
class Solution {
public:
    int numSubarrayBoundedMax(vector<int>& A, int L, int R) {
        int n=(int)A.size();
        vector<int> dp(n,0);
              
        dp[0]= (A[0]>=L && A[0]<=R) ? 1 : 0;
        int count = dp[0], lastBig=A[0]>R ? 0 : -1 ;
        for (int i=1; i<n; ++i) {
//            cout << i << ":  ";
            if (A[i]>=L && A[i]<=R) {
                dp[i] = i-lastBig;
            } else if (A[i]>R) {
                lastBig=i; // dp[i] keeps 0
            } else { //A[i]<L
                dp[i]=dp[i-1];
            }
            count += dp[i];
//            cout << dp[i] << "  count: " << count <<  endl;
        }
        return count;
    }
};

