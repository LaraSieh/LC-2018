96. Unique Binary Search Trees
Given n, how many structurally unique BST's (binary search trees) that store values 1 ... n?

Example:

Input: 3
Output: 5
Explanation:
Given n = 3, there are a total of 5 unique BST's:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3

//TLE solution,  but it's simple and straightforward
class Solution {
public:
    int numTrees(int n) {
        return trees(1,n);        
    }
    
    int trees(int start, int end) {
        if (start>=end) return 1;
        
        int count=0;
        for (int i=start; i<=end; ++i) {
            count += trees(start,i-1)*trees(i+1, end);
        }
        return count;
    }
};

//fast one
 /*
    number of unique trees: G(n) = F(1, n) + F(2, n) + ... + F(n, n).
    F(i, n) = G(i-1) * G(n-i)	1 <= i <= n 
    G(n) = G(0) * G(n-1) + G(1) * G(n-2) + â€¦ + G(n-1) * G(0)
    */
class Solution {
public:
    int numTrees(int n) {
        vector<int> trees(n+1,0);
        
        trees[0]=1;
        for (int i=1; i<=n; ++i) {
            for (int j=0; j<i; ++j ) {
                trees[i] += trees[j] * trees[i-j-1]; 
            }
        }
        return trees[n];
    }
};
