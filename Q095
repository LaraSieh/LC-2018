95. Unique Binary Search Trees II

Given an integer n, generate all structurally unique BST's (binary search trees) that store values 1 ... n.

Example:

Input: 3
Output:
[
  [1,null,3,2],
  [3,2,null,1],
  [3,1,null,null,2],
  [2,1,3],
  [1,null,2,null,3]
]
Explanation:
The above output corresponds to the 5 unique BST's shown below:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
   
   
// 24ms solution
class Solution {
public:
    vector<TreeNode*> generateTrees(int n) {
        vector<TreeNode *> result;
        
        for (int i=1; i<n; ++i) {
            TreeNode *root = new TreeNode(i);
            
            root->left =  makeSubTree(1,i-1);
            root->right = makeSubTree(i+1,n);
            result.push_back(root);
        }
        
        return result;        
    }
    
    TreeNode * makeSubTree(int start, int end) {
        if (start>end) return NULL;
        
        TreeNode *
        for (int i=start; i<=end; ++i) {
            TreeNode *root = new TreeNode(i); 

            root->left =  makeSubTree(start,i-1);
            root->right = makeSubTree(i+1,end);
        }
        return root;
    }
};

// 18ms solution
class Solution {
public:
    vector<TreeNode*> generateTrees(int n) {
        if (n<=0) return {}; 
        return *generate(1,n);
    }
    
    vector<TreeNode *>* generate(int start, int end) {
        vector<TreeNode *> *result = new vector<TreeNode *>(); 
        
        if (start>end) {
            result->push_back(NULL);
            return result;
        }
        
        for (int i=start; i<=end; ++i) {
            auto left = generate(start, i-1);
            auto right = generate(i+1, end);
            
            for (int l=0; l<left->size(); ++l) {
                for (int r=0; r<right->size(); ++r) {
                    TreeNode *root = new TreeNode(i);
                    
                    root->left = (*left)[l];
                    root->right = (*right)[r];
                    result->push_back(root);
                }
            }
        }
        return result;
    }
};

// 16ms solution
class Solution {
public:
    vector<TreeNode*> generateTrees(int n) { 
        return generate(1,n);
    }
    
    vector<TreeNode *> generate(int start, int end) {
        vector<TreeNode *> result; 
        
        if (start>end) {
            return result;
        } else if (start==end) {
            result.push_back(new TreeNode(start));
            return result;
        }
        
        for (int i=start; i<=end; ++i) {
            auto left = generate(start, i-1);
            auto right = generate(i+1, end);
            
            if (left.empty()) left.push_back(nullptr);
            if (right.empty()) right.push_back(nullptr);
            
            for (const auto l : left) {
                for (const auto r : right) {
                    TreeNode *root = new TreeNode(i);
                    
                    root->left = l;
                    root->right = r;
                    result.push_back(root);
                }
            }
        }
        return result;
    }
};
