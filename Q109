109. Convert Sorted List to Binary Search Tree
DescriptionHintsSubmissionsDiscussSolution
Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

Example:

Given the sorted linked list: [-10,-3,0,5,9],

One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:

      0
     / \
   -3   9
   /   /
 -10  5
 
//  37ms
class Solution {
public:
    TreeNode* sortedListToBST(ListNode* head) {
        
        // get total number of items in the list
        int total=0; 
        ListNode *node=head;
        while (node) {++total; node = node->next;};
        
        mNode = head;
        return buildTree(total);
        
    }
    
    TreeNode *buildTree(int n) {
        if (n==0) return nullptr;
        
        TreeNode *root = new TreeNode(0);
        root->left = buildTree(n/2);
        root->val = mNode->val;
        mNode = mNode->next;
        root->right = buildTree(n-n/2-1);
        
        return root;
    }
    
private:
    ListNode *mNode;
};

// 24ms
class Solution {
public:
    TreeNode* sortedListToBST(ListNode* head) {
        
        // get total number of items in the list
        int total=0; 
        ListNode *node=head;
        while (node) {++total; node = node->next;};
        
        curNode = head;
        return buildTree(1,total);
        
    }
    
    TreeNode *buildTree(int start, int end) {
        if (start>end) {
            return nullptr;
        }
        
        int mid = start + (end-start)/2;
        TreeNode *l = buildTree(start,mid-1);
        TreeNode *root = new TreeNode(curNode->val);
        curNode = curNode->next;
        TreeNode *r = buildTree(mid+1,end);
        root->left = l;
        root->right = r;
        
        return root;
    }
    
private:
    ListNode *curNode;
};


// fastest, 22ms, 99%, though only slight change from above
class Solution {
public:
    TreeNode* sortedListToBST(ListNode* head) {
        
        // get total number of items in the list 
        curNode=head;
        int total=0;
        while (head) {++total; head = head->next;};
    
        return buildTree(1,total);
        
    }
    
    TreeNode *buildTree(int start, int end) {
        if (start>end) {
            return nullptr;
        }
        
        int mid = start + (end-start)/2;
        TreeNode *l = buildTree(start,mid-1);
        TreeNode *root = new TreeNode(curNode->val);
        curNode = curNode->next;
        TreeNode *r = buildTree(mid+1,end);
        root->left = l;
        root->right = r;
        
        return root;
    }
    
private:
    ListNode *curNode;
};
