19. Remove Nth Node From End of List

Given a linked list, remove the nth node from the end of list and return its head.

For example,

   Given linked list: 1->2->3->4->5, and n = 2.

   After removing the second node from the end, the linked list becomes 1->2->3->5.
Note:
Given n will always be valid.
Try to do this in one pass.

//S1: 10ms,  using dummy head
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode dummy(0);
        dummy.next = head;
        
        ListNode *prev=&dummy, *first=head, *second=head;
        
        while (second && n>0) {
            second = second->next;
            --n;
        }
        
        while (second) {
            prev = first;
            first = first->next;
            second = second->next;
        }
        
        // first now is pointing to the nth element from end
        prev->next = first->next;
        delete first;
        
        return dummy.next;
    }
};


//S2:  using pointer to pointer
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode** pointerToNth = &head, *cur = head;
        
        while(n--) {            
            cur = cur->next;
        }
        
        while(cur != NULL)
        {
            pointerToNth = &((*pointerToNth)->next);
            cur = cur->next;
        }
        
        // now pointToNth points to nth element from end
        ListNode *toDelete = *pointerToNth;
        *pointerToNth = (*pointerToNth)->next;
        if (toDelete)
            delete toDelete;
        
        return head;
    }
};

