230. Kth Smallest Element in a BST
Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.

Note: 
You may assume k is always valid, 1 ≤ k ≤ BST's total elements.

Example 1:

Input: root = [3,1,4,null,2], k = 1
   3
  / \
 1   4
  \
   2
Output: 1
Example 2:

Input: root = [5,3,6,2,4,null,null,1], k = 3
       5
      / \
     3   6
    / \
   2   4
  /
 1
Output: 3
Follow up:
What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? 
How would you optimize the kthSmallest routine?



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        if (inorder.size() == k) {
            return inorder.back();
        }

        if (!root)  return INT_MAX;
        int kth = kthSmallest(root->left,k);
        if (kth < INT_MAX)
            return kth;
        inorder.push_back(root->val);
        return kthSmallest(root->right, k);
    }

private:
    vector<int> inorder;
};

// 由于BST的性质，我们可以快速定位出第k小的元素是在左子树还是右子树，我们首先计算出左子树的结点个数总和cnt，
// 如果k小于等于左子树结点总和cnt，说明第k小的元素在左子树中，直接对左子结点调用递归即可。
// 如果k大于cnt+1，说明目标值在右子树中，对右子结点调用递归函数，注意此时的k应为k-cnt-1，应为已经减少了cnt+1个结点。
// /如果k正好等于cnt+1，说明当前结点即为所求，返回当前结点值即可
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        int counts = count(root->left);
        if (k <= counts) {
            return kthSmallest(root->left, k);
        } else if (k > counts + 1) {
            return kthSmallest(root->right, k - counts - 1);
        }
        return root->val;
    }
    
    int count(TreeNode* node) {
       if (!node) return 0;
       return 1 + count(node->left) + count(node->right);
    }
};


//Follow up question (
//What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? 
//How would you optimize the kthSmallest routine?

//copied from web not verified by leetcode online
    struct KthTreeNode {
        int val;
        int count;  // add this new member variable 
        KthTreeNode *left;
        KthTreeNode *right;
        KthTreeNode(int x) : val(x), count(1), left(NULL), right(NULL) {}
    };
    
    KthTreeNode* build(TreeNode* root) {
        if (!root) return NULL;
        KthTreeNode *node = new KthTreeNode(root->val);
        node->left = build(root->left);
        node->right = build(root->right);
        if (node->left) node->count += node->left->count;
        if (node->right) node->count += node->right->count;
        return node;
    }
    
    int kthSmallest(TreeNode* root, int k) {
        KthTreeNode *node = build(root);
        return helper(node, k);
    }
    
    int helper(MyTreeNode* node, int k) {
        if (node->left) {
            int cnt = node->left->count;
            if (k <= cnt) {
                return helper(node->left, k);
            } else if (k > cnt + 1) {
                return helper(node->right, k - 1 - cnt);
            }
            return node->val;
        } else {
            if (k == 1) return node->val;
            return helper(node->right, k - 1);
        }
    }
