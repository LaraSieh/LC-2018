74. Search a 2D Matrix
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.


// binary search in row then in column
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m=static_cast<int>(matrix.size());
        if (m==0) return false;
        
        int n=static_cast<int>(matrix[0].size());
        if (n==0) return false;
        
        int l=0, r=m-1;
        while (l<=r) {
            int mid = l + (r-l)/2;
            if (matrix[mid][0]==target)
                return true;
            else if (matrix[mid][0]<target) {
                l = mid + 1;
            } else { //matrix[i][0]>target
                r = mid - 1;
            }
        }
        if (r<0) return false;
        // matrix[r][0] should be the row that possibly contains target
        int row =r;
        l=0,r=n-1;
        while (l<=r) {
            int mid = l + (r-l)/2;
            if (matrix[row][mid]==target)
                return true;
            else if (matrix[row][mid]<target) {
                l = mid + 1;
            } else 
                r = mid - 1;
        }
        
        return false;
    }
};

// log(m*n)
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m=static_cast<int>(matrix.size());
        if (m==0) return false;
        
        int n=static_cast<int>(matrix[0].size());
        if (n==0) return false;
        
        int l=0, r=m*n-1;
        while (l<=r) {
            int mid = l + (r-l)/2;
            int cur = matrix[mid/n][mid%n];
            if (cur ==target)
                return true;
            else if (cur<target) {
                l = mid + 1;
            } else { // cur>target
                r = mid - 1;
            }
        }
        
        return false;
    }
};

// another
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m=static_cast<int>(matrix.size());
        if (m==0) return false;
        
        int n=static_cast<int>(matrix[0].size());
        if (n==0) return false;
        
        int l=0, r=m*n-1;
        while (l<r) {
            int mid = l + (r-l)/2;
            if (matrix[mid/n][mid%n]<target) {
                l = mid + 1;
            } else { // cur>target
                r = mid;
            }
        }
        
        return (matrix[r/n][r%n]==target);
    }
};
