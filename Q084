84. Largest Rectangle in Histogram

Given n non-negative integers representing the histogram's bar height where the width of each bar is 1, 
find the area of largest rectangle in the histogram.

Above is a histogram where width of each bar is 1, given height = [2,1,5,6,2,3].
The largest rectangle is shown in the shaded area, which has area = 10 unit.


//slow but straightforward
class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        int maxArea=0;
        
        for (int i=0; i<heights.size(); ++i) {
            maxArea = max(maxArea, area(heights,i));
        }
        return maxArea;
    }
    
    int area(vector<int>& heights, int index) {
        int l = index-1, r=index+1;
        while (l>=0 && heights[l]>=heights[index]) --l;
        while (r<heights.size() && heights[r]>=heights[index]) ++r;
        
        return (r-l-1)*heights[index];
    }
};


// genius solution, copied from discussion.  but is it really o(n)? 
class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        if (heights.size()==0) return 0;
        heights.insert(heights.begin(),-1);
        heights.push_back(-1);
        
        int maxArea=0;
        stack<int> indexStack;
        
        for (int i=0; i<heights.size(); ++i) {
            while (!indexStack.empty() && heights[i]<=heights[indexStack.top()]) {
                int h = heights[indexStack.top()];
                indexStack.pop();
                if (heights[i]<h) 
                    maxArea = max(maxArea, (i-indexStack.top()-1)*h);
            }
            indexStack.push(i); 
        }
        heights.erase(heights.begin()); heights.pop_back();
        return maxArea;
    }
};
