210. Course Schedule II
There are a total of n courses you have to take, labeled from 0 to n-1.

Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, return the ordering of courses you should take to finish all courses.

There may be multiple correct orders, you just need to return one of them. If it is impossible to finish all courses, return an empty array.

Example 1:

Input: 2, [[1,0]] 
Output: [0,1]
Explanation: There are a total of 2 courses to take. To take course 1 you should have finished   
             course 0. So the correct course order is [0,1] .
Example 2:

Input: 4, [[1,0],[2,0],[3,1],[3,2]]
Output: [0,1,2,3] or [0,2,1,3]
Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both     
             courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0. 
             So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3] .
Note:

The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.
You may assume that there are no duplicate edges in the input prerequisites.



class Solution {
public:
    // dfs as it is looking for one path
    vector<int> findOrder(int numCourses, vector<pair<int, int>>& prerequisites) {
        //build graph
        vector<vector<int>> graph(numCourses, vector<int>(0));
        for (auto &p : prerequisites) {
            graph[p.first].push_back(p.second);
        }
        
        vector<int> visited(numCourses,0);
        vector<int> path;
        for (int i=0; i<numCourses; ++i) {
            if (!canFinish(numCourses, graph, i, path, visited))
                return vector<int>{};
        }
        return path;
    }
    
    bool canFinish(int n, vector<vector<int>>& g, int index, vector<int>& path,vector<int>& visited) {
        if (visited[index]== 1) return true;
        if (visited[index]==-1) return false; //there's a loop
        visited[index] = -1;
        for (int i : g[index]) {
            if (!canFinish(n,g,i,path,visited))
                return false;
        }
        path.push_back(index);
        visited[index]=1;
        return true;
    }
};

// better version
class Solution {
public:
    // dfs as it is looking for one path
    vector<int> findOrder(int numCourses, vector<pair<int, int>>& prerequisites) {
        //build graph
        for(const auto& p : prerequisites)
            graph[p.second].push_back(p.first);
        vector<State> v(numCourses, UNKNOWN);
        vector<int> path; 
        for(int i = 0; i < numCourses; ++i)
            if(canFinish(i, v, path)==VISITING) return {};
        return path;
    }
private:
    enum State {UNKNOWN, VISITING, VISITED};
    unordered_map<int,std::vector<int> > graph;
    State canFinish(int index, vector<State>& v, std::vector<int>& path) {
        if(v[index] ==UNKNOWN){
            v[index] = VISITING;
            for(const int t : graph[index])
                if(canFinish(t, v, path)==VISITING) return VISITING;
            v[index] = VISITED;
            path.emplace(path.begin(), index);
        } 
        return v[index];
    }
};

// use set<int> 70%
class Solution {
public:
    vector<int> findOrder(int numCourses, vector<pair<int, int>>& prerequisites) {
        vector<int> classOrder(numCourses,-1); 
        
        vector<set<int>> dependents(numCourses);
        vector<int> prerequires(numCourses,0);
        
        //build dependents and prerequires
        for (auto &p : prerequisites) {
            dependents[p.second].insert(p.first);
            prerequires[p.first]++;
        }
        
        int count=0;
        queue<int> q;
        for (int i=0; i<numCourses; ++i) {
            if (prerequires[i]==0) {
                q.push(i);
            }
        }
        while (!q.empty()) {
            int course=q.front(); q.pop();
            classOrder[count++]= course;
            for (int i : dependents[course]) {
                --prerequires[i];
                if (prerequires[i]==0)
                    q.push(i);
            }
        }
        
        return (count==numCourses ? classOrder : vector<int>{});
    }

};


// use vector<int> 90%
class Solution {
public:
    vector<int> findOrder(int numCourses, vector<pair<int, int>>& prerequisites) {
        vector<int> classOrder(numCourses,-1); 
        
        vector<vector<int>> dependents(numCourses);
        vector<int> prerequires(numCourses,0);
        
        //build dependents and prerequires
        for (auto &p : prerequisites) {
            dependents[p.second].push_back(p.first);
            prerequires[p.first]++;
        }
        
        int count=0;
        queue<int> q;
        for (int i=0; i<numCourses; ++i) {
            if (prerequires[i]==0) {
                q.push(i);
            }
        }
        while (!q.empty()) {
            int course=q.front(); q.pop();
            classOrder[count++]= course;
            for (int i : dependents[course]) {
                --prerequires[i];
                if (prerequires[i]==0)
                    q.push(i);
            }
        }
        
        return (count==numCourses ? classOrder : vector<int>{});
    }
};
