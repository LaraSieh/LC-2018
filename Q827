827. Making A Large Island
In a 2D grid of 0s and 1s, we change at most one 0 to a 1.

After, what is the size of the largest island? (An island is a 4-directionally connected group of 1s).

Example 1:

Input: [[1, 0], [0, 1]]
Output: 3
Explanation: Change one 0 to 1 and connect two 1s, then we get an island with area = 3.
Example 2:

Input: [[1, 1], [1, 0]]
Output: 4
Explanation: Change the 0 to 1 and make the island bigger, only one island with area = 4.
Example 3:

Input: [[1, 1], [1, 1]]
Output: 4
Explanation: Can't change any 0 to 1, only one island with area = 4.
 

Notes:

1 <= grid.length = grid[0].length <= 50.
0 <= grid[i][j] <= 1.



class Solution {
public:
    vector<vector<int>> dir={{1,0},{-1,0},{0,1},{0,-1}};
    int largestIsland(vector<vector<int>>& grid) {
        int n=(int)grid.size();
        
        int index=2, largest=0;
        unordered_map<int,int> areas;
        for (int i=0; i<n; ++i) {
            for (int j=0; j<n; ++j) {
                if (grid[i][j]==1) {
                    areas[index] = dfs(grid,i,j,index);
                    largest=max(largest,areas[index++]);
                }
            }
        }
        
        for (int i=0;i<n;++i) {
            for (int j=0;j<n;++j) {
                if (grid[i][j]==0) {
                    unordered_set<int> seen={};
                    int cur=1;
                    for (auto d : dir) {
                        int x=i+d[0],y=j+d[1];
                        if (x<0||x>n-1||y<0||y>n-1) 
                            continue;

                        index=grid[x][y];
                        if (index>1 && seen.count(index)==0) {
                            seen.insert(index);
                            cur += areas[index];
                        }
                    }
                    largest=max(largest,cur);
                }
            }
        }
        return largest;
    }
    
    int dfs(vector<vector<int>>& grid, int x, int y, int index) {
        int area = 0, n=(int)grid.size();
        grid[x][y]=index;
        for (auto d : dir) {
            int xnew=x+d[0],ynew=y+d[1]; 
            if (xnew<0||xnew>n-1||ynew<0||ynew>n-1) 
                continue;

            if (grid[xnew][ynew] == 1)
                area += dfs(grid,xnew,ynew,index); 
        }
        return area+1;
    }
};
