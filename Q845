845. Longest Mountain in Array
Let's call any (contiguous) subarray B (of A) a mountain if the following properties hold:

B.length >= 3
There exists some 0 < i < B.length - 1 such that B[0] < B[1] < ... B[i-1] < B[i] > B[i+1] > ... > B[B.length - 1]
(Note that B could be any subarray of A, including the entire array A.)

Given an array A of integers, return the length of the longest mountain. 

Return 0 if there is no mountain.

Example 1:

Input: [2,1,4,7,3,2,5]
Output: 5
Explanation: The largest mountain is [1,4,7,3,2] which has length 5.
Example 2:

Input: [2,2,2]
Output: 0
Explanation: There is no mountain.
Note:

0 <= A.length <= 10000
0 <= A[i] <= 10000
Follow up:

Can you solve it using only one pass?
Can you solve it in O(1) space?


// straight foward flow
class Solution {
public:
    int longestMountain(vector<int>& A) {
        int longest=0;
        
        int up=0, start=-1;
        for (int i=1;i<(int)A.size();++i) {
            if (A[i]==A[i-1]) {
                if (up==2) {
                   longest=max(longest,i-start); 
                }
                up=0;
                start = i;
            } else if (A[i]>A[i-1]) {
                if (up==1) continue;
                if (up==2) {
                    up=1;
                    longest=max(longest,i-start);
                    start = i-1;
                } else { //up==0
                    ++up;start=i-1;
                }
                //if (up==1) keep on going
            } else { //A[i]<A[i-1]
                if (up==1) 
                    up=2;
                if (i==A.size()-1 && up==2)
                   longest=max(longest,i-start+1);
                
            }
        }
        return longest;
    }



// cleaned up
class Solution {
public:
    int longestMountain(vector<int>& A) {
        int longest=0;
        
        int up=0, start=-1;
        for (int i=1;i<(int)A.size();++i) {
            if (A[i]==A[i-1]) {
                if (up==2) longest = max(longest,i-start);
                up=0;start=i;
            } else if (up!=1 && A[i]>A[i-1]) {
                if (up==2) longest = max(longest,i-start);
                up=1; start=i-1;                
            } else if (up==1 && A[i]<A[i-1]) {
                up=2;
            } 
        }
        if (up==2) longest=max(longest,(int)A.size()-start);
        return longest;
    }
};
