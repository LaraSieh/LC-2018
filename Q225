225. Implement Stack using Queues
DescriptionHintsSubmissionsDiscussSolution
Implement the following operations of a stack using queues.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
empty() -- Return whether the stack is empty.
Example:

MyStack stack = new MyStack();

stack.push(1);
stack.push(2);  
stack.top();   // returns 2
stack.pop();   // returns 2
stack.empty(); // returns false
Notes:

You must use only standard operations of a queue -- which means only push to back, peek/pop from front, size, and is empty operations are valid.
Depending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.
You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).


// one queue solution
class MyStack {
public:
    /** Initialize your data structure here. */
    MyStack() {
        
    }
    
    /** Push element x onto stack. */
    void push(int x) {
        int len = m_q.size();
        m_q.push(x);
        while (len--) {
            m_q.push(m_q.front());
            m_q.pop();
        }
    }
    
    /** Removes the element on top of the stack and returns that element. */
    int pop() {
        int val = m_q.front();
        m_q.pop();
        return val;
    }
    
    /** Get the top element. */
    int top() {
        return m_q.front();
    }
    
    /** Returns whether the stack is empty. */
    bool empty() {
        return m_q.empty();
    }

private:
    queue<int> m_q;
};

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack obj = new MyStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * bool param_4 = obj.empty();
 */
 
 // double queue solution
 class MyStack {
public:
    /** Initialize your data structure here. */
    MyStack() {
        
    }
    
    /** Push element x onto stack. */
    void push(int x) {
        queue<int>* q1=&m_q1, *q2 =&m_q2;
        if (!m_q1.empty()) {
            q1=&m_q2;
            q2=&m_q1;
        }
        q1->push(x);
        while (!q2->empty()) {
            q1->push(q2->front());
            q2->pop();
        }
    }
    
    /** Removes the element on top of the stack and returns that element. */
    int pop() {
        int val = 0;
        if (!m_q1.empty()) {
            val = m_q1.front();
            m_q1.pop();
        } else {
            val = m_q2.front();
            m_q2.pop();
        }
        return val;
    }
    
    /** Get the top element. */
    int top() {
        int val=0;
        if (!m_q1.empty())
            val = m_q1.front();
        else 
            val = m_q2.front();
        return val;
    }
    
    /** Returns whether the stack is empty. */
    bool empty() {
        return (m_q1.empty() && m_q2.empty());
    }

private:
    queue<int> m_q1;
    queue<int> m_q2;
    
};
