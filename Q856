856. Score of Parentheses
DescriptionHintsSubmissionsDiscussSolution
Given a balanced parentheses string S, compute the score of the string based on the following rule:

() has score 1
AB has score A + B, where A and B are balanced parentheses strings.
(A) has score 2 * A, where A is a balanced parentheses string.
 

Example 1:

Input: "()"
Output: 1
Example 2:

Input: "(())"
Output: 2
Example 3:

Input: "()()"
Output: 2
Example 4:

Input: "(()(()))"
Output: 6
 

Note:

S is a balanced parentheses string, containing only ( and ).
2 <= S.length <= 50


//Every position in the string has a depth - some number of matching parentheses surrounding it. For example, the dot in (()(.())) has depth 2, because of these parentheses: (__(.__))
//Our goal is to maintain the score at the current depth we are on. When we see an opening bracket, we increase our depth, and our score at the new depth is 0. When we see a closing bracket, we add twice the score of the previous deeper part - except when counting (), which has a score of 1.



// straight forward solution
class Solution {
public:
    int scoreOfParentheses(string S) {
        stack<int> nums;
        
        for (char c : S) {
            if (c=='(') {
                nums.push(0);
            } else {
                int n = nums.top(); nums.pop();
                if (n==0) {
                    nums.push(1);
                } else { // number
                    while (!nums.empty() && nums.top() !=0) {
                        n += nums.top();
                        nums.pop();
                    }
                    // nums.top == 0 
                    if (!nums.empty()) {
                        nums.pop(); 
                        nums.push(n*2);
                    }
                }
            }
        }
        
        int score=0;
        while (!nums.empty()) {
            score +=nums.top();
            nums.pop();
        }
        
        return score;
    }
};


// much nicer one
class Solution {
public:
    int scoreOfParentheses(string S) {
        stack<int> nums;
        
        nums.push(0);
        for (char c : S) {
            if (c=='(') {
                nums.push(0);
            } else {
                int i1 = nums.top(); nums.pop();
                int i2 = nums.top(); nums.pop();
                nums.push(i2 + max(i1*2,1));
            }
        }
        
        int score = nums.top(); nums.pop();
        return score;
    }
};


// The final sum will be a sum of powers of 2, as every core (a substring (), with score 1) 
//will have it's score multiplied by 2 for each exterior set of parentheses that contains that core.
class Solution {
public:
    int scoreOfParentheses(string S) {
        int score=0, core=0;
        for (int i=0; i<(int)S.size(); ++i) {
            if (S[i]=='(')
                ++core;
            else { //S[i] ==')'
                --core;
                if (S[i-1]=='(') //at core
                    score +=  1<<core;
            }
        }
        return score;
    }
};
