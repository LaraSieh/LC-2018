97. Interleaving String
Given s1, s2, s3, find whether s3 is formed by the interleaving of s1 and s2.

Example 1:

Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbcbcac"
Output: true
Example 2:

Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbbaccc"
Output: false


class Solution {
public:
    bool isInterleave(string s1, string s2, string s3) {
        int n1=s1.size(), n2=s2.size(), n3=s3.size();
        
        if (n1+n2 != n3) return false;
        if (n1==0) return (s2==s3);
        if (n2==0) return (s1==s3);
        
        //at this point s1,s2,s3 are all non-empty
        vector<vector<bool>>  interleaving(n1+1, vector<bool>(n2+1, false));
        //i- the ith char in s1, j - jth char in s2
        interleaving[0][0]=true;
        for (int i=1; i<=n1; ++i) {
            interleaving[i][0] = interleaving[i-1][0] && (s1[i-1]==s3[i-1]);
        }
        for (int j=1;j<=n2;++j) {
            interleaving[0][j] = interleaving[0][j-1] && (s2[j-1]==s3[j-1]);
        }
        
        for (int i=1; i<=n1; ++i) {
            for (int j=1; j<=n2; ++j) {
                interleaving[i][j] = (interleaving[i-1][j]&&(s1[i-1]==s3[i+j-1])) 
                        || (interleaving[i][j-1]&&(s2[j-1]==s3[i+j-1]));
            }
        }
        
        return interleaving[n1][n2];
    }
};


// using vector<int> instead of vector<bool> improves the time from 5ms to 3ms!!!
class Solution {
public:
    bool isInterleave(string s1, string s2, string s3) {
        int n1=s1.size(), n2=s2.size(), n3=s3.size();
        
        if (n1+n2 != n3) return false;
        if (n1==0) return (s2==s3);
        if (n2==0) return (s1==s3);
        
        //at this point s1,s2,s3 are all non-empty
        vector<vector<int>>  interleaving(n1+1, vector<int>(n2+1, 0));
        //i- the ith char in s1, j - jth char in s2
        interleaving[0][0]=1;
        for (int i=1; i<=n1; ++i) {
            interleaving[i][0] = interleaving[i-1][0] && (s1[i-1]==s3[i-1]);
        }
        for (int j=1;j<=n2;++j) {
            interleaving[0][j] = interleaving[0][j-1] && (s2[j-1]==s3[j-1]);
        }
        
        for (int i=1; i<=n1; ++i) {
            for (int j=1; j<=n2; ++j) {
                interleaving[i][j] = (interleaving[i-1][j]&&(s1[i-1]==s3[i+j-1])) 
                        || (interleaving[i][j-1]&&(s2[j-1]==s3[i+j-1]));
            }
        }
        
        return interleaving[n1][n2];
    }
};
