
25. Reverse Nodes in k-Group
Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.

Example:

Given this linked list: 1->2->3->4->5

For k = 2, you should return: 2->1->4->3->5

For k = 3, you should return: 3->2->1->4->5

Note:

Only constant extra memory is allowed.
You may not alter the values in the list's nodes, only nodes itself may be changed.


// S1: recursive
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        ListNode *cur=head, *reversed=NULL;     
        for (int i=0; i<k; ++i) {
            if (cur==NULL)
                return head;
            cur = cur->next;
        }
            
        reversed = reverseList(head, cur);
        head->next = reverseKGroup(cur,k);
        return reversed;
    }
    
    ListNode* reverseList(ListNode *h, ListNode *t) {
        ListNode *prev = t;
        
        while (h != t) {
            ListNode *n=h->next;
            h->next = prev;
            prev = h;
            h = n;
        }
        
        return prev;
    }
};



// S2: iterative
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        if(head==NULL||k==1) return head;
        
        ListNode dummy(-1);
        dummy.next = head;
        int numNodes=0;

        // prev - tail of last processed subgroup
        // cur  - cur node being worked on
        // next - next node to be reversed with cur
        ListNode *cur = &dummy, *next, *prev = &dummy;
        while(cur = cur->next) 
            numNodes++;
        while(numNodes>=k) {
            cur = prev->next;
            next = cur->next;
            for(int i=1;i<k;++i) {
                cur->next=next->next;
                next->next=prev->next;
                prev->next=next;
                next=cur->next;
            }
            prev = cur;
            numNodes-=k;
        }
        return dummy.next;
    }
};
