106. Construct Binary Tree from Inorder and Postorder Traversal
DescriptionHintsSubmissionsDiscussSolution
Given inorder and postorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

For example, given

inorder = [9,3,15,20,7]
postorder = [9,15,7,20,3]
Return the following binary tree:

    3
   / \
  9  20
    /  \
   15   7

//my solution, straight forward
class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        return buildSubTree(inorder,postorder,0,inorder.size()-1,0,postorder.size()-1);
    }
    
      TreeNode *buildSubTree(vector<int>& inorder,vector<int>& postorder,
                             int is,int ie,int ps,int pe) {  
        if (is>ie || ps>pe) 
            return nullptr;
        
        int index = pe;
        for (int i=0; i<=ie-is;++i) {
            // find the root item
            if (inorder[i+is] == postorder[pe]) {
                index = i; break;
            }
        }
        
        TreeNode *root=new TreeNode(postorder[pe]);
        root->left = buildSubTree(inorder,postorder,is,is+index-1,ps,ps+index-1);
        root->right  = buildSubTree(inorder,postorder,is+index+1,ie,ps+index,pe-1);
          
        return root;
    }
};

// copied from discussion, 
class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        assert(inorder.size() == postorder.size());
        if (inorder.size() == 0) return nullptr;

        TreeNode* root, ** curr = &root;
        auto j = postorder.crbegin();
        stack<TreeNode*> s;
        for (auto i=inorder.crbegin(); i!=inorder.crend(); ++i) {
            while (s.empty() || s.top()->val != *i) {
                auto node = new TreeNode{*j++};
                s.push(node);
                *curr = node;
                curr = &node->right;
            }
            curr = &(s.top()->left);
            s.pop();
        }

        assert(j == postorder.crend());
        return root;
    }
};
