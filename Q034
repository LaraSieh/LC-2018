34. Search for a Range

Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]


class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int num=nums.size(), left=0, right=num-1;
        vector<int> result={-1,-1};
        
         if (num==0) return result;
        
        int mid = 0;
        while (left < right) {
            int mid = left + (right-left)/2;
            if (nums[mid] >= target) {
                right = mid;
            } else { // nums[mid]<target
                left = mid+1;
            }
        }
        
        if (nums[right]==target) {
            int left = right;
            while (right<num && nums[right]==target)
                ++right;
            result[0] = left;
            result[1] = right-1;
        }
        
        return result;
    }
};
