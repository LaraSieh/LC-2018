115. Distinct Subsequences
DescriptionHintsSubmissionsDiscussSolution
Given a string S and a string T, count the number of distinct subsequences of S which equals T.

A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, "ACE" is a subsequence of "ABCDE" while "AEC" is not).

Example 1:

Input: S = "rabbbit", T = "rabbit"
Output: 3
Explanation:

As shown below, there are 3 ways you can generate "rabbit" from S.
(The caret symbol ^ means the chosen letters)

rabbbit
^^^^ ^^
rabbbit
^^ ^^^^
rabbbit
^^^ ^^^
Example 2:

Input: S = "babgbag", T = "bag"
Output: 5
Explanation:

As shown below, there are 5 ways you can generate "bag" from S.
(The caret symbol ^ means the chosen letters)

babgbag
^^ ^
babgbag
^^    ^
babgbag
^    ^^
babgbag
  ^  ^^
babgbag
    ^^^



//straightforward DP, 6ms
class Solution {
public:
    int numDistinct(string s, string t) {
        int m=s.size(), n=t.size();
        int dp[m+1][n+1];
        
        for (int i=0; i<=n; ++i) 
            dp[0][i]=0;
        for (int i=0;i<=m;++i) 
            dp[i][0] = 1;
        
        //dp[i][j], how many possiblities that s[0,i-1] contains t[0,j-1]
        for (int i=1; i<=m; ++i) {
            for (int j=1; j<=n; ++j) {
                dp[i][j] = dp[i-1][j] + 
                    ((s[i-1] == t[j-1]) ? dp[i-1][j-1] : 0);
            }
        }
        return dp[m][n];
    }
};


// 4ms, copied from discussion 
class Solution {
public:
    int numDistinct(string s, string t) {
        int m=s.size(), n=t.size();
        if (m<n) return 0;
        
        vector<int> count(n + 1);
        count[0] = 1;
        for (int i = 1; i <= m; ++i) {
            int lo = max(i - m + n, 1);
            int hi = min(i, n);
            for (int j = hi; j >= lo; --j) {
                if (s[i - 1] == t[j - 1]) {
                    count[j] += count[j - 1];
                }
            }
        }
        
        return count[n];
    }
};
