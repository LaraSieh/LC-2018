87. Scramble String

Given a string s1, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.

Below is one possible representation of s1 = "great":

    great
   /    \
  gr    eat
 / \    /  \
g   r  e   at
           / \
          a   t
To scramble the string, we may choose any non-leaf node and swap its two children.

For example, if we choose the node "gr" and swap its two children, it produces a scrambled string "rgeat".

    rgeat
   /    \
  rg    eat
 / \    /  \
r   g  e   at
           / \
          a   t
We say that "rgeat" is a scrambled string of "great".

Similarly, if we continue to swap the children of nodes "eat" and "at", it produces a scrambled string 

//straightforward, 7ms
class Solution {
public:
    bool isScramble(string s1, string s2) {        
        //deal with special cases first
        if(s1.size() != s2.size()) return false;
        if (s1==s2) return true;
        
        string tmp1=s1, tmp2=s2;
        sort(tmp1.begin(), tmp1.end());
        sort(tmp2.begin(), tmp2.end());
        if (tmp1 != tmp2) return false;
        
        int n=static_cast<int>(s1.size()); //at this point, n is the length of s2 as well
        // must start with 1, non-zero substring 
        for (int i=1; i<n; ++i) {
            string s11 = s1.substr(0,i);
            string s12 = s1.substr(i);
            string s21 = s2.substr(0,i);
            string s22 = s2.substr(i);
            if (isScramble(s11,s21) && isScramble(s12,s22))
                return true;
            
            s21 = s2.substr(n-i);
            s22 = s2.substr(0,n-i);
            
            if (isScramble(s11,s21) && isScramble(s12,s22))
                return true;
        }
        return false;
    }
};

// DP, but it's very slow
class Solution {
public:  
    bool isScramble(string s1, string s2) {        
        //deal with special cases first
        if(s1.size() != s2.size()) return false;
        if (s1==s2) return true;
        
        int n = s1.size();
        vector<vector<vector<bool>>> dp(n, vector<vector<bool>>(n, vector<bool>(n+1, false)));
        for (int i=0; i<n; ++i) {
            for (int j=0; j<n; ++j) {
                dp[i][j][0] = true;
                dp[i][j][1] = (s1[i]==s2[j]);
            }
        }
        for (int len=2; len<=n; ++len) {
            for (int i=0; i<n-len+1; ++i) {
                for (int j=0; j<n-len+1;++j) {
                    for (int k=1; k<len; ++k) {
                        if ((dp[i][j][k]&&dp[i+k][j+k][len-k]) || (dp[i][j+len-k][k]&&dp[i+k][j][len-k]))
                            dp[i][j][len] = true; 
                    }
                }
            }
        }
        
        return dp[0][0][n];
    }
};


// copied from discussion, only 4ms
class Solution {
public:  
    bool isScramble(string s1, string s2) {        
        if(s1 == s2)
            return true;
        int l = s1.size();
        if(l == 1)
            return false;
        int s1map = 0, s2map = 0;
        for(int mid = 1;mid < l; ++ mid){
            s1map += 1 << (s1[mid - 1] - 'a');
            s2map += 1 << (s2[mid - 1] - 'a');
            if(s1map != s2map)
                continue;
            if(isScramble(s1.substr(0, mid), s2.substr(0, mid)) && isScramble(s1.substr(mid), s2.substr(mid)))
                return true;
        }
        s1map = 0, s2map = 0;
        
        for(int mid = 1;mid < l; ++ mid){
            s1map += 1 << (s1[mid - 1] - 'a');
            s2map += 1 << (s2[l - mid] - 'a');
            if(s1map != s2map)
                continue;
            if(isScramble(s1.substr(0, mid), s2.substr(l - mid)) && isScramble(s1.substr(mid), s2.substr(0, l - mid)))
                return true;
        }
        return false;
    }
};
