99. Recover Binary Search Tree
Two elements of a binary search tree (BST) are swapped by mistake.

Recover the tree without changing its structure.

Example 1:

Input: [1,3,null,null,2]

   1
  /
 3
  \
   2

Output: [3,1,null,null,2]

   3
  /
 1
  \
   2


// traditional in-order-traversal recursive, but o(n) space
class Solution {
public:
    void recoverTree(TreeNode* root) {
        vector<TreeNode *> nodes;
        vector<int>   vals;
        
        inorder(root,nodes,vals);
        sort(vals.begin(), vals.end());
        for (int i=0; i<nodes.size(); ++i) {
            nodes[i]->val = vals[i];
        }
        return;
    }
    
    void inorder(TreeNode *root, vector<TreeNode *>&nodes, vector<int>& vals) {
        if (root==nullptr) return;
        
        inorder(root->left,nodes,vals);
        nodes.push_back(root);
        vals.push_back(root->val);
        inorder(root->right,nodes,vals);
    }
};


//using Morris traversal, or threaded binary tree
//make it O(1) space complexity

//Morris-traversal is similar to recursive/iterative traversal, but we need to modify the tree structure during the
// traversal. before we visiting the left tree of a root, we will build a back-edge between rightmost node in left tree 
// and the root. So we can go back to the root node after we are done with the left tree. Then we locate the rightmost node 
// in left subtree again, cut the back-edge, recover the tree structure and start visit right subtree. 
// The detection of two incorrect TreeNodes is similar to iterative/recursive in-order traversal.
class Solution {
public:
    void recoverTree(TreeNode* root) {
        TreeNode *first=nullptr, *second=nullptr, *before=nullptr;
        TreeNode *cur=root, *pre=nullptr;
        
        while (cur) {
            // compare with pre node as in in-order-traversal
            if (pre && cur->val<=pre->val) {
                if (first==nullptr) first = pre;
                second = cur;
            }
            
            if(cur->left) {
                //locate cur's rightmost node
                before = cur->left;
                while (before->right && before->right != cur) 
                    before=before->right;
                
                if (before->right == cur) {
                    // if the left tree has already been visited, cut the connection with cur
                    // visit next right tree
                    before->right = nullptr;
                    pre = cur;
                    cur =  cur->right;
                } else {
                    before->right = cur;
                    cur = cur->left;
                }
            } else { //no left tree
                pre = cur;
                cur =  cur->right;
            }
        }
        
        if (first) swap(first->val, second->val);
        
        return;
    }
};
