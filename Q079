79. Word Search
Given a 2D board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

Example:

board =
[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]

Given word = "ABCCED", return true.
Given word = "SEE", return true.
Given word = "ABCB", return false.


// solution
class Solution {
public:
    bool exist(vector<vector<char>>& board, string word) {
        if (word.size()==0) return true;
        if (board.size()==0 || board[0].size()==0) return true;
        
        int m=board.size(), n=board[0].size();   
        for (int i=0; i<m; ++i) {
            for (int j=0; j<n; ++j) {
                if (exist(board,i,j,word,0))
                    return true;
            }
        }
        return false;
    }
    
    int direction[4][2]={{1,0},{0,1},{-1,0},{0,-1}};
    bool exist(vector<vector<char>>& board, int x, int y, string word, int index) {
        if (board[x][y]!=word[index]) {
            return false;
        }
        
        if (index==word.size()-1) { // at this point, board[x][y]==word[index], so this is the last char
            return true;
        }
        
        board[x][y] = '\0';
        int m=board.size(), n=board[0].size();
        for (int i=0; i<4; ++i) {
            int xnew = x+direction[i][0];
            int ynew = y+direction[i][1];
            if (xnew>=0&&xnew<m&&ynew>=0&&ynew<n) {
                if (exist(board,xnew,ynew,word,index+1))
                    return true;
            }
        }
        board[x][y] = word[index];   
        
        return false;
    }
};

// two changes made it from ~40% - %85%
// 1. in dfs(), change parameter "string word" to "const string& word"
// 2. change overlapped function exist() to dfs()
class Solution {
public:
    bool exist(vector<vector<char>>& board, string word) {
        if (word.size()==0) 
            return true;
        if (board.size()==0 || board[0].size()==0) 
            return true;
        
        for (int i=0; i<board.size(); ++i) {
            for (int j=0; j<board[0].size(); ++j) {
                if (dfs(board,i,j,word,0))
                    return true;
            }
        }
        return false;
    }
    
    int direction[4][2]={{1,0},{0,1},{-1,0},{0,-1}};
    bool dfs(vector<vector<char>>& board, int x, int y,const string& word, int index) {
        if (board[x][y]!=word[index]) {
            return false;
        }
        
        if (index==word.size()-1) { // at this point, board[x][y]==word[index], so this is the last char
            return true;
        }
        
        board[x][y] = '\0';
        int m=board.size(), n=board[0].size();
        for (int i=0; i<4; ++i) {
            int xnew = x+direction[i][0];
            int ynew = y+direction[i][1];
            if (xnew>=0&&xnew<board.size()&&ynew>=0&&ynew<board[0].size()) {
                if (dfs(board,xnew,ynew,word,index+1))
                    return true;
            }
        }
        board[x][y] = word[index];   
        
        return false;
    }
};
